"""
Django settings for the petpal project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see:
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from configparser import ConfigParser

# Production detection - Railway will set this environment variable
IS_PRODUCTION = os.getenv('DJANGO_ENV') == 'production' or os.getenv('RAILWAY_ENVIRONMENT') is not None

# Debug: Print environment info for troubleshooting
if IS_PRODUCTION:
    print(f"[DEBUG] Production environment detected")
    print(f"[DEBUG] DJANGO_ENV: {os.getenv('DJANGO_ENV')}")
    print(f"[DEBUG] RAILWAY_ENVIRONMENT: {os.getenv('RAILWAY_ENVIRONMENT')}")
    print(f"[DEBUG] DATABASE_URL available: {bool(os.getenv('DATABASE_URL'))}")
else:
    print(f"[DEBUG] Development environment")

# ========== Paths ========== #
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ========== Environment-specific URLs ========== #
if IS_PRODUCTION:
    # Production URLs - strip trailing slashes for CORS compatibility
    FRONTEND_URL = os.getenv('FRONTEND_URL', 'https://localhost:3000').rstrip('/')
    BACKEND_URL = os.getenv('BACKEND_URL', 'https://localhost:8000').rstrip('/')
else:
    # Development URLs  
    FRONTEND_URL = "http://localhost:3000"
    BACKEND_URL = "http://localhost:8000"

# ========== Configuration ========== #
CONFIG = ConfigParser()
CONFIG.read(BASE_DIR / "config.ini")

# ========== Security ========== #
if IS_PRODUCTION:
    SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-change-this-in-production')
    DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
    
    # Additional production security settings
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = False  # Railway handles SSL termination
    USE_TZ = True
else:
    # SECRET_KEY = CONFIG.get("Django", "Secret")
    SECRET_KEY = 'django-insecure-localhost-development-key-only'  # Default key for localhost development
    DEBUG = True
if IS_PRODUCTION:
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1',
        '.railway.app',  # Allow all Railway subdomains
        '.vercel.app',   # Allow Vercel domains for CORS
    ]
    # Add Railway public domain if available
    if os.getenv('RAILWAY_PUBLIC_DOMAIN'):
        ALLOWED_HOSTS.append(os.getenv('RAILWAY_PUBLIC_DOMAIN'))
else:
    ALLOWED_HOSTS = [
        '127.0.0.1', 
        'localhost',
        '.railway.app',  # Allow all Railway subdomains
        '.vercel.app',   # Allow Vercel domains for CORS
    ]
    # Add Railway public domain if available
    if os.getenv('RAILWAY_PUBLIC_DOMAIN'):
        ALLOWED_HOSTS.append(os.getenv('RAILWAY_PUBLIC_DOMAIN'))

# ========== Applications ========== #
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "api",
    "corsheaders",
    "social_django",
]

# ========== Middleware ========== #
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
]

# Add WhiteNoise in production for static file serving
if IS_PRODUCTION:
    MIDDLEWARE.append("whitenoise.middleware.WhiteNoiseMiddleware")

MIDDLEWARE.extend([
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
])

# ========== CORS Configuration ========== #
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [FRONTEND_URL]
CSRF_TRUSTED_ORIGINS = [FRONTEND_URL]

# For development - allow localhost
CORS_ALLOWED_ORIGINS.extend([
    "http://localhost:3000",
    "https://localhost:3000",
])
CSRF_TRUSTED_ORIGINS.extend([
    "http://localhost:3000", 
    "https://localhost:3000",
])

# ========== Session Configuration for Cross-Domain ========== #
if IS_PRODUCTION:
    # 生产环境跨域session配置
    SESSION_COOKIE_SAMESITE = 'None'
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
else:
    # 开发环境
    SESSION_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SECURE = False

# ========== URL Configuration ========== #
ROOT_URLCONF = "petpal.urls"

# ========== Templates ========== #
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ========== WSGI Application ========== #
WSGI_APPLICATION = "petpal.wsgi.application"

# ========== Database Configuration ========== #
if IS_PRODUCTION:
    # Production database (PostgreSQL on Railway)
    import dj_database_url
    
    # Check if DATABASE_URL is available (runtime) vs build phase
    database_url = os.getenv('DATABASE_URL')
    
    if database_url:
        # Runtime: use real PostgreSQL database
        DATABASES = {
            'default': dj_database_url.config(
                default=database_url,
                conn_max_age=600,
                conn_health_checks=True,
            )
        }
    else:
        # Build phase: use dummy database config to avoid connection attempts
        print("[DEBUG] Build phase: using dummy database config")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.dummy',
            }
        }
else:
    # Development database (SQLite)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# ========== Password Validation ========== #
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ========== Internationalization ========== #
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ========== Static and Media Files ========== #
STATIC_URL = "/static/"

if IS_PRODUCTION:
    # Production static files configuration
    STATIC_ROOT = BASE_DIR / "staticfiles"
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # Don't include build directories in production
    STATICFILES_DIRS = []
else:
    # Development static files configuration
    STATICFILES_DIRS = [
        BASE_DIR.parent / "build/static",
        BASE_DIR.parent / "build",
    ]
    STATIC_ROOT = BASE_DIR / "staticfiles"

# DEFAULT_PHOTO_URL = 'https://my-bucket.s3.amazonaws.com/default.jpg'
DEFAULT_PHOTO_URL = f"{STATIC_URL}image/default.png"

# ========== Default Primary Key ========== #
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ========== Authentication Backends ========== #
GOOGLE_OAUTH2_BACKEND = 'social_core.backends.google.GoogleOAuth2'
AUTHENTICATION_BACKENDS = (
    GOOGLE_OAUTH2_BACKEND,
    "django.contrib.auth.backends.ModelBackend",
)

# Social Auth configuration with fallback to environment variables
try:
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = CONFIG.get("GoogleOAuth2", "client_id")
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = CONFIG.get("GoogleOAuth2", "client_secret")
except:
    # Fallback to environment variables for production
    SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('GOOGLE_OAUTH2_CLIENT_ID', '')
    SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET', '')

SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {"prompt": "select_account"}
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ["fullname", "picture", "email"]

# ========== API Keys ========== #
try:
    GOOGLE_MAPS_API_KEY = CONFIG.get("GoogleMaps", "API_KEY")
except:
    # Fallback to environment variables for production
    GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY', '')

# ========== Login/Redirect Configuration ========== #
LOGIN_URL = f"{FRONTEND_URL}/Register"
SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = f"{BACKEND_URL}/oauth/complete/google-oauth2/"
LOGIN_REDIRECT_URL = FRONTEND_URL

# ========== Allowed Path Suffixes ========== #
ALLOWED_PATH_SUFFIXES = [
    "",
    "ProfileSignUp",
    "Matching",
    "Dashboard",
    "Profile",
]

# ========== Environment Variables ========== #
# Only generate .env file in development environment
if DEBUG and not os.getenv('RAILWAY_ENVIRONMENT'):
    env_path = BASE_DIR.parent / ".env"
    try:
        with open(env_path, "w") as f:
            f.write(f"REACT_APP_GOOGLE_CLIENT_ID={SOCIAL_AUTH_GOOGLE_OAUTH2_KEY}\n")
            if GOOGLE_MAPS_API_KEY:
                f.write(f"REACT_APP_GOOGLE_MAPS_API_KEY={GOOGLE_MAPS_API_KEY}\n")
            f.write(f"REACT_APP_BACKEND_URL={BACKEND_URL}\n")
        print(f".env file generated successfully at {env_path} with client_id.")
    except Exception as e:
        print(f"Warning: Could not generate .env file: {e}")

# ========== OpenAI API Key ========== #
try:
    OPENAI_API_KEY = CONFIG.get("OpenAI", "API_KEY")
except:
    # Fallback to environment variables for production
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')

# ========== CORS Policy for Development ========== #
# Only allow localhost origins for security
# CORS_ALLOW_ALL_ORIGINS = True
